// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// update_eb_estimates_rcpp
Rcpp::List update_eb_estimates_rcpp(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id, const arma::vec& points, const arma::vec& weights, const arma::vec& eb_prev_theta, const arma::vec& eb_prev_psd);
RcppExport SEXP _MixLS_update_eb_estimates_rcpp(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP idSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP eb_prev_thetaSEXP, SEXP eb_prev_psdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eb_prev_theta(eb_prev_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eb_prev_psd(eb_prev_psdSEXP);
    rcpp_result_gen = Rcpp::wrap(update_eb_estimates_rcpp(params, X, U, Z, y, id, points, weights, eb_prev_theta, eb_prev_psd));
    return rcpp_result_gen;
END_RCPP
}
// update_eb_estimates_stage3_rcpp
Rcpp::List update_eb_estimates_stage3_rcpp(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id, const arma::vec& points, const arma::vec& weights, const std::string& model_type, int adaptive, const arma::mat& eb_prev_theta2, const arma::mat& eb_prev_thetav);
RcppExport SEXP _MixLS_update_eb_estimates_stage3_rcpp(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP idSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP model_typeSEXP, SEXP adaptiveSEXP, SEXP eb_prev_theta2SEXP, SEXP eb_prev_thetavSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< int >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eb_prev_theta2(eb_prev_theta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eb_prev_thetav(eb_prev_thetavSEXP);
    rcpp_result_gen = Rcpp::wrap(update_eb_estimates_stage3_rcpp(params, X, U, Z, y, id, points, weights, model_type, adaptive, eb_prev_theta2, eb_prev_thetav));
    return rcpp_result_gen;
END_RCPP
}
// stage12_gradient_rcpp
arma::vec stage12_gradient_rcpp(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id, const arma::vec& points, const arma::vec& weights);
RcppExport SEXP _MixLS_stage12_gradient_rcpp(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP idSEXP, SEXP pointsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(stage12_gradient_rcpp(params, X, U, Z, y, id, points, weights));
    return rcpp_result_gen;
END_RCPP
}
// stage12_gradient_adaptive
arma::vec stage12_gradient_adaptive(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id, const arma::vec& points, const arma::vec& weights, int adaptive, const arma::vec& theta_eb, const arma::vec& psd_eb);
RcppExport SEXP _MixLS_stage12_gradient_adaptive(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP idSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP adaptiveSEXP, SEXP theta_ebSEXP, SEXP psd_ebSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_eb(theta_ebSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psd_eb(psd_ebSEXP);
    rcpp_result_gen = Rcpp::wrap(stage12_gradient_adaptive(params, X, U, Z, y, id, points, weights, adaptive, theta_eb, psd_eb));
    return rcpp_result_gen;
END_RCPP
}
// stage3_gradient_combined
arma::vec stage3_gradient_combined(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id, const arma::vec& points, const arma::vec& weights, const std::string& model_type);
RcppExport SEXP _MixLS_stage3_gradient_combined(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP idSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(stage3_gradient_combined(params, X, U, Z, y, id, points, weights, model_type));
    return rcpp_result_gen;
END_RCPP
}
// stage3_gradient_adaptive_combined
arma::vec stage3_gradient_adaptive_combined(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id_numeric, const arma::vec& points, const arma::vec& weights, const std::string& model_type, int adaptive, const arma::mat& eb_theta2, const arma::mat& eb_thetav);
RcppExport SEXP _MixLS_stage3_gradient_adaptive_combined(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP id_numericSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP model_typeSEXP, SEXP adaptiveSEXP, SEXP eb_theta2SEXP, SEXP eb_thetavSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id_numeric(id_numericSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< int >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eb_theta2(eb_theta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eb_thetav(eb_thetavSEXP);
    rcpp_result_gen = Rcpp::wrap(stage3_gradient_adaptive_combined(params, X, U, Z, y, id_numeric, points, weights, model_type, adaptive, eb_theta2, eb_thetav));
    return rcpp_result_gen;
END_RCPP
}
// stage12_hessian_rcpp
arma::mat stage12_hessian_rcpp(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id, const arma::vec& points, const arma::vec& weights);
RcppExport SEXP _MixLS_stage12_hessian_rcpp(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP idSEXP, SEXP pointsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(stage12_hessian_rcpp(params, X, U, Z, y, id, points, weights));
    return rcpp_result_gen;
END_RCPP
}
// stage12_hessian_adaptive
arma::mat stage12_hessian_adaptive(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id, const arma::vec& points, const arma::vec& weights, int adaptive, const arma::vec& theta_eb, const arma::vec& psd_eb);
RcppExport SEXP _MixLS_stage12_hessian_adaptive(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP idSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP adaptiveSEXP, SEXP theta_ebSEXP, SEXP psd_ebSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_eb(theta_ebSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psd_eb(psd_ebSEXP);
    rcpp_result_gen = Rcpp::wrap(stage12_hessian_adaptive(params, X, U, Z, y, id, points, weights, adaptive, theta_eb, psd_eb));
    return rcpp_result_gen;
END_RCPP
}
// stage3_hessian_combined
arma::mat stage3_hessian_combined(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id, const arma::vec& points, const arma::vec& weights, const std::string& model_type);
RcppExport SEXP _MixLS_stage3_hessian_combined(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP idSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(stage3_hessian_combined(params, X, U, Z, y, id, points, weights, model_type));
    return rcpp_result_gen;
END_RCPP
}
// stage3_hessian_adaptive_combined
arma::mat stage3_hessian_adaptive_combined(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id_numeric, const arma::vec& points, const arma::vec& weights, const std::string& model_type, int adaptive, const arma::mat& eb_theta2, const arma::mat& eb_thetav);
RcppExport SEXP _MixLS_stage3_hessian_adaptive_combined(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP id_numericSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP model_typeSEXP, SEXP adaptiveSEXP, SEXP eb_theta2SEXP, SEXP eb_thetavSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id_numeric(id_numericSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< int >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eb_theta2(eb_theta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eb_thetav(eb_thetavSEXP);
    rcpp_result_gen = Rcpp::wrap(stage3_hessian_adaptive_combined(params, X, U, Z, y, id_numeric, points, weights, model_type, adaptive, eb_theta2, eb_thetav));
    return rcpp_result_gen;
END_RCPP
}
// stage12_loglik_rcpp
double stage12_loglik_rcpp(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id, const arma::vec& points, const arma::vec& weights);
RcppExport SEXP _MixLS_stage12_loglik_rcpp(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP idSEXP, SEXP pointsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(stage12_loglik_rcpp(params, X, U, Z, y, id, points, weights));
    return rcpp_result_gen;
END_RCPP
}
// stage12_loglik_adaptive
double stage12_loglik_adaptive(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id, const arma::vec& points, const arma::vec& weights, int adaptive, const arma::vec& theta_eb, const arma::vec& psd_eb);
RcppExport SEXP _MixLS_stage12_loglik_adaptive(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP idSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP adaptiveSEXP, SEXP theta_ebSEXP, SEXP psd_ebSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_eb(theta_ebSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psd_eb(psd_ebSEXP);
    rcpp_result_gen = Rcpp::wrap(stage12_loglik_adaptive(params, X, U, Z, y, id, points, weights, adaptive, theta_eb, psd_eb));
    return rcpp_result_gen;
END_RCPP
}
// stage3_loglik_combined
double stage3_loglik_combined(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id_numeric, const arma::vec& points, const arma::vec& weights, const std::string& model_type);
RcppExport SEXP _MixLS_stage3_loglik_combined(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP id_numericSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id_numeric(id_numericSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(stage3_loglik_combined(params, X, U, Z, y, id_numeric, points, weights, model_type));
    return rcpp_result_gen;
END_RCPP
}
// stage3_loglik_adaptive_combined
double stage3_loglik_adaptive_combined(const arma::vec& params, const arma::mat& X, const arma::mat& U, const arma::mat& Z, const arma::vec& y, const arma::uvec& id_numeric, const arma::vec& points, const arma::vec& weights, const std::string& model_type, int adaptive, const arma::mat& eb_theta2, const arma::mat& eb_thetav);
RcppExport SEXP _MixLS_stage3_loglik_adaptive_combined(SEXP paramsSEXP, SEXP XSEXP, SEXP USEXP, SEXP ZSEXP, SEXP ySEXP, SEXP id_numericSEXP, SEXP pointsSEXP, SEXP weightsSEXP, SEXP model_typeSEXP, SEXP adaptiveSEXP, SEXP eb_theta2SEXP, SEXP eb_thetavSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type id_numeric(id_numericSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< int >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eb_theta2(eb_theta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eb_thetav(eb_thetavSEXP);
    rcpp_result_gen = Rcpp::wrap(stage3_loglik_adaptive_combined(params, X, U, Z, y, id_numeric, points, weights, model_type, adaptive, eb_theta2, eb_thetav));
    return rcpp_result_gen;
END_RCPP
}
// solve_matrix_rcpp
arma::vec solve_matrix_rcpp(const arma::mat& hess_adj, const arma::vec& grad);
RcppExport SEXP _MixLS_solve_matrix_rcpp(SEXP hess_adjSEXP, SEXP gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type hess_adj(hess_adjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grad(gradSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_matrix_rcpp(hess_adj, grad));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MixLS_update_eb_estimates_rcpp", (DL_FUNC) &_MixLS_update_eb_estimates_rcpp, 10},
    {"_MixLS_update_eb_estimates_stage3_rcpp", (DL_FUNC) &_MixLS_update_eb_estimates_stage3_rcpp, 12},
    {"_MixLS_stage12_gradient_rcpp", (DL_FUNC) &_MixLS_stage12_gradient_rcpp, 8},
    {"_MixLS_stage12_gradient_adaptive", (DL_FUNC) &_MixLS_stage12_gradient_adaptive, 11},
    {"_MixLS_stage3_gradient_combined", (DL_FUNC) &_MixLS_stage3_gradient_combined, 9},
    {"_MixLS_stage3_gradient_adaptive_combined", (DL_FUNC) &_MixLS_stage3_gradient_adaptive_combined, 12},
    {"_MixLS_stage12_hessian_rcpp", (DL_FUNC) &_MixLS_stage12_hessian_rcpp, 8},
    {"_MixLS_stage12_hessian_adaptive", (DL_FUNC) &_MixLS_stage12_hessian_adaptive, 11},
    {"_MixLS_stage3_hessian_combined", (DL_FUNC) &_MixLS_stage3_hessian_combined, 9},
    {"_MixLS_stage3_hessian_adaptive_combined", (DL_FUNC) &_MixLS_stage3_hessian_adaptive_combined, 12},
    {"_MixLS_stage12_loglik_rcpp", (DL_FUNC) &_MixLS_stage12_loglik_rcpp, 8},
    {"_MixLS_stage12_loglik_adaptive", (DL_FUNC) &_MixLS_stage12_loglik_adaptive, 11},
    {"_MixLS_stage3_loglik_combined", (DL_FUNC) &_MixLS_stage3_loglik_combined, 9},
    {"_MixLS_stage3_loglik_adaptive_combined", (DL_FUNC) &_MixLS_stage3_loglik_adaptive_combined, 12},
    {"_MixLS_solve_matrix_rcpp", (DL_FUNC) &_MixLS_solve_matrix_rcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_MixLS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
